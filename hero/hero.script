local gravity = -20

local jump_takeoff_speed = 900

function init( self )
	msg.post( '.', 'acquire_input_focus' )
	
	self.position = go.get_position()
	
	self.velocity = vmath.vector3( 0, 0, 0 )
	
	self.ground_contact = false
end

function final( self )
	msg.post( '.', 'release_input_focus' )
end

function update( self, delta_time )
	local gravity = vmath.vector3( 0, gravity, 0 )
	
	if not self.ground_contact then
		self.velocity = self.velocity + gravity
	end
	
	go.set_position( go.get_position() + self.velocity * delta_time )
	
	self.correction = vmath.vector3()
	self.ground_contact = false
end

local function handle_geometry_contact(self, normal, distance) 
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
	    self.ground_contact = true
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end

function on_message( self, message_id, message, sender )
	if message_id == hash('contact_point_response') then
		if message.group == hash('geometry') then
			handle_geometry_contact( self, message.normal, message.distance )
		end
	end
end

local function jump( self )
	if self.ground_contact then
		self.velocity.y = jump_takoff_speed
	end
end

local function abort_jump( self )
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input( self, action_id, action )
	if action_id == hash('jump') or action_id == hash('touch') then
		if action.pressed then
			jump( self )
		elseif action.released then
			abort_jump( self )
		end
	end 
end